"""fix grades

Revision ID: 75576c1c1e2e
Revises: 448772c1f4cb
Create Date: 2025-07-15 05:21:24.546813

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '75576c1c1e2e'
down_revision = '448772c1f4cb'
branch_labels = None
depends_on = None


def upgrade():
    # Step 1: Drop dependent constraints and columns from students table
    with op.batch_alter_table('students', schema=None) as batch_op:
        batch_op.drop_constraint('students_class_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('students_UPI_number_key', type_='unique')
        batch_op.drop_constraint('students_assesment_number_key', type_='unique')
        batch_op.drop_column('class_id')
        batch_op.drop_column('UPI_number')
        batch_op.drop_column('assesment_number')
        # Make class_name nullable for now to avoid error
        batch_op.add_column(sa.Column('class_name', sa.String(length=50), nullable=True))

    # Step 2: Drop classrooms table
    op.drop_table('classrooms')

    # Step 3: Drop performances table
    op.drop_table('performances')

    # Step 4: Modify grades table
    with op.batch_alter_table('grades', schema=None) as batch_op:
        # Make marks nullable for now to avoid NULL constraint violation
        batch_op.add_column(sa.Column('marks', sa.Float(), nullable=True))
        batch_op.alter_column('subject',
            existing_type=sa.VARCHAR(length=100),
            type_=sa.String(length=50),
            existing_nullable=False)
        batch_op.alter_column('term',
            existing_type=sa.VARCHAR(length=50),
            type_=sa.String(length=20),
            existing_nullable=False)
        batch_op.drop_column('score')
        batch_op.drop_column('year')
        batch_op.drop_column('posted_on')




def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('students', schema=None) as batch_op:
        batch_op.add_column(sa.Column('UPI_number', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('class_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('assesment_number', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
        batch_op.create_foreign_key(batch_op.f('students_class_id_fkey'), 'classrooms', ['class_id'], ['id'])
        batch_op.create_unique_constraint(batch_op.f('students_assesment_number_key'), ['assesment_number'], postgresql_nulls_not_distinct=False)
        batch_op.create_unique_constraint(batch_op.f('students_UPI_number_key'), ['UPI_number'], postgresql_nulls_not_distinct=False)
        batch_op.drop_column('class_name')

    with op.batch_alter_table('grades', schema=None) as batch_op:
        batch_op.add_column(sa.Column('posted_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
        batch_op.alter_column('term',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.alter_column('subject',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.drop_column('marks')

    op.create_table('classrooms',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('classrooms_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('class_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['teacher_id'], ['staff.id'], name='classrooms_teacher_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='classrooms_pkey'),
    sa.UniqueConstraint('class_name', name='classrooms_class_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('performances',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('term', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('average_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], name=op.f('performances_student_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('performances_pkey'))
    )
    # ### end Alembic commands ###
